#include "FlightDataRecorderConverter.h"

using namespace std;

void FlightDataRecorderConverter::writeHeader(ofstream& out, const string& delimiter) {
  out << "ap_sm.time.dt" << delimiter;
  out << "ap_sm.time.simulation_time" << delimiter;
  out << "ap_sm.data.Theta_deg" << delimiter;
  out << "ap_sm.data.Phi_deg" << delimiter;
  out << "ap_sm.data.qk_deg_s" << delimiter;
  out << "ap_sm.data.rk_deg_s" << delimiter;
  out << "ap_sm.data.pk_deg_s" << delimiter;
  out << "ap_sm.data.V_ias_kn" << delimiter;
  out << "ap_sm.data.V_tas_kn" << delimiter;
  out << "ap_sm.data.V_mach" << delimiter;
  out << "ap_sm.data.V_gnd_kn" << delimiter;
  out << "ap_sm.data.alpha_deg" << delimiter;
  out << "ap_sm.data.H_ft" << delimiter;
  out << "ap_sm.data.H_ind_ft" << delimiter;
  out << "ap_sm.data.H_radio_ft" << delimiter;
  out << "ap_sm.data.H_dot_ft_min" << delimiter;
  out << "ap_sm.data.Psi_magnetic_deg" << delimiter;
  out << "ap_sm.data.Psi_magnetic_track_deg" << delimiter;
  out << "ap_sm.data.Psi_true_deg" << delimiter;
  out << "ap_sm.data.bx_m_s2" << delimiter;
  out << "ap_sm.data.by_m_s2" << delimiter;
  out << "ap_sm.data.bz_m_s2" << delimiter;
  out << "ap_sm.data.nav_valid" << delimiter;
  out << "ap_sm.data.nav_loc_deg" << delimiter;
  out << "ap_sm.data.nav_dme_valid" << delimiter;
  out << "ap_sm.data.nav_dme_nmi" << delimiter;
  out << "ap_sm.data.nav_loc_valid" << delimiter;
  out << "ap_sm.data.nav_loc_error_deg" << delimiter;
  out << "ap_sm.data.nav_gs_valid" << delimiter;
  out << "ap_sm.data.nav_gs_error_deg" << delimiter;
  out << "ap_sm.data.flight_guidance_xtk_nmi" << delimiter;
  out << "ap_sm.data.flight_guidance_tae_deg" << delimiter;
  out << "ap_sm.data.flight_phase" << delimiter;
  out << "ap_sm.data.V2_kn" << delimiter;
  out << "ap_sm.data.VAPP_kn" << delimiter;
  out << "ap_sm.data.VLS_kn" << delimiter;
  out << "ap_sm.data.is_flight_plan_available" << delimiter;
  out << "ap_sm.data.altitude_constraint_ft" << delimiter;
  out << "ap_sm.data.thrust_reduction_altitude" << delimiter;
  out << "ap_sm.data.thrust_reduction_altitude_go_around" << delimiter;
  out << "ap_sm.data.acceleration_altitude" << delimiter;
  out << "ap_sm.data.acceleration_altitude_engine_out" << delimiter;
  out << "ap_sm.data.acceleration_altitude_go_around" << delimiter;
  out << "ap_sm.data.cruise_altitude" << delimiter;
  out << "ap_sm.data.on_ground" << delimiter;
  out << "ap_sm.data.zeta_deg" << delimiter;
  out << "ap_sm.data.throttle_lever_1_pos" << delimiter;
  out << "ap_sm.data.throttle_lever_2_pos" << delimiter;
  out << "ap_sm.data.flaps_handle_index" << delimiter;
  out << "ap_sm.data_computed.time_since_touchdown" << delimiter;
  out << "ap_sm.data_computed.time_since_lift_off" << delimiter;
  out << "ap_sm.data_computed.H_fcu_in_selection" << delimiter;
  out << "ap_sm.data_computed.H_constraint_valid" << delimiter;
  out << "ap_sm.data_computed.Psi_fcu_in_selection" << delimiter;
  out << "ap_sm.input.FD_active" << delimiter;
  out << "ap_sm.input.AP_1_push" << delimiter;
  out << "ap_sm.input.AP_2_push" << delimiter;
  out << "ap_sm.input.AP_DISCONNECT_push" << delimiter;
  out << "ap_sm.input.HDG_push" << delimiter;
  out << "ap_sm.input.HDG_pull" << delimiter;
  out << "ap_sm.input.ALT_push" << delimiter;
  out << "ap_sm.input.ALT_pull" << delimiter;
  out << "ap_sm.input.VS_push" << delimiter;
  out << "ap_sm.input.VS_pull" << delimiter;
  out << "ap_sm.input.LOC_push" << delimiter;
  out << "ap_sm.input.APPR_push" << delimiter;
  out << "ap_sm.input.V_c_kn" << delimiter;
  out << "ap_sm.input.Psi_fcu_deg" << delimiter;
  out << "ap_sm.input.H_fcu_ft" << delimiter;
  out << "ap_sm.input.H_constraint_ft" << delimiter;
  out << "ap_sm.input.H_dot_fcu_fpm" << delimiter;
  out << "ap_sm.input.FPA_fcu_deg" << delimiter;
  out << "ap_sm.input.TRK_FPA_mode" << delimiter;
  out << "ap_sm.input.DIR_TO_trigger" << delimiter;
  out << "ap_sm.lateral.armed.NAV" << delimiter;
  out << "ap_sm.lateral.armed.LOC" << delimiter;
  out << "ap_sm.lateral.condition.NAV" << delimiter;
  out << "ap_sm.lateral.condition.LOC_CPT" << delimiter;
  out << "ap_sm.lateral.condition.LOC_TRACK" << delimiter;
  out << "ap_sm.lateral.condition.LAND" << delimiter;
  out << "ap_sm.lateral.condition.FLARE" << delimiter;
  out << "ap_sm.lateral.condition.ROLL_OUT" << delimiter;
  out << "ap_sm.lateral.condition.GA_TRACK" << delimiter;
  out << "ap_sm.lateral.output.mode" << delimiter;
  out << "ap_sm.lateral.output.mode_reversion" << delimiter;
  out << "ap_sm.lateral.output.mode_reversion_TRK_FPA" << delimiter;
  out << "ap_sm.lateral.output.law" << delimiter;
  out << "ap_sm.lateral.output.Psi_c_deg" << delimiter;
  out << "ap_sm.lateral_previous.armed.NAV" << delimiter;
  out << "ap_sm.lateral_previous.armed.LOC" << delimiter;
  out << "ap_sm.lateral_previous.condition.NAV" << delimiter;
  out << "ap_sm.lateral_previous.condition.LOC_CPT" << delimiter;
  out << "ap_sm.lateral_previous.condition.LOC_TRACK" << delimiter;
  out << "ap_sm.lateral_previous.condition.LAND" << delimiter;
  out << "ap_sm.lateral_previous.condition.FLARE" << delimiter;
  out << "ap_sm.lateral_previous.condition.ROLL_OUT" << delimiter;
  out << "ap_sm.lateral_previous.condition.GA_TRACK" << delimiter;
  out << "ap_sm.lateral_previous.output.mode" << delimiter;
  out << "ap_sm.lateral_previous.output.mode_reversion" << delimiter;
  out << "ap_sm.lateral_previous.output.mode_reversion_TRK_FPA" << delimiter;
  out << "ap_sm.lateral_previous.output.law" << delimiter;
  out << "ap_sm.lateral_previous.output.Psi_c_deg" << delimiter;
  out << "ap_sm.vertical.armed.ALT" << delimiter;
  out << "ap_sm.vertical.armed.ALT_CST" << delimiter;
  out << "ap_sm.vertical.armed.CLB" << delimiter;
  out << "ap_sm.vertical.armed.DES" << delimiter;
  out << "ap_sm.vertical.armed.GS" << delimiter;
  out << "ap_sm.vertical.condition.ALT" << delimiter;
  out << "ap_sm.vertical.condition.ALT_CPT" << delimiter;
  out << "ap_sm.vertical.condition.ALT_CST" << delimiter;
  out << "ap_sm.vertical.condition.ALT_CST_CPT" << delimiter;
  out << "ap_sm.vertical.condition.CLB" << delimiter;
  out << "ap_sm.vertical.condition.DES" << delimiter;
  out << "ap_sm.vertical.condition.GS_CPT" << delimiter;
  out << "ap_sm.vertical.condition.GS_TRACK" << delimiter;
  out << "ap_sm.vertical.condition.LAND" << delimiter;
  out << "ap_sm.vertical.condition.FLARE" << delimiter;
  out << "ap_sm.vertical.condition.ROLL_OUT" << delimiter;
  out << "ap_sm.vertical.condition.SRS" << delimiter;
  out << "ap_sm.vertical.condition.SRS_GA" << delimiter;
  out << "ap_sm.vertical.condition.THR_RED" << delimiter;
  out << "ap_sm.vertical.condition.H_fcu_active" << delimiter;
  out << "ap_sm.vertical.output.mode" << delimiter;
  out << "ap_sm.vertical.output.mode_autothrust" << delimiter;
  out << "ap_sm.vertical.output.mode_reversion" << delimiter;
  out << "ap_sm.vertical.output.law" << delimiter;
  out << "ap_sm.vertical.output.H_c_ft" << delimiter;
  out << "ap_sm.vertical.output.H_dot_c_fpm" << delimiter;
  out << "ap_sm.vertical.output.FPA_c_deg" << delimiter;
  out << "ap_sm.vertical.output.V_c_kn" << delimiter;
  out << "ap_sm.vertical.output.ALT_soft_mode_active" << delimiter;
  out << "ap_sm.vertical_previous.armed.ALT" << delimiter;
  out << "ap_sm.vertical_previous.armed.ALT_CST" << delimiter;
  out << "ap_sm.vertical_previous.armed.CLB" << delimiter;
  out << "ap_sm.vertical_previous.armed.DES" << delimiter;
  out << "ap_sm.vertical_previous.armed.GS" << delimiter;
  out << "ap_sm.vertical_previous.condition.ALT" << delimiter;
  out << "ap_sm.vertical_previous.condition.ALT_CPT" << delimiter;
  out << "ap_sm.vertical_previous.condition.ALT_CST" << delimiter;
  out << "ap_sm.vertical_previous.condition.ALT_CST_CPT" << delimiter;
  out << "ap_sm.vertical_previous.condition.CLB" << delimiter;
  out << "ap_sm.vertical_previous.condition.DES" << delimiter;
  out << "ap_sm.vertical_previous.condition.GS_CPT" << delimiter;
  out << "ap_sm.vertical_previous.condition.GS_TRACK" << delimiter;
  out << "ap_sm.vertical_previous.condition.LAND" << delimiter;
  out << "ap_sm.vertical_previous.condition.FLARE" << delimiter;
  out << "ap_sm.vertical_previous.condition.ROLL_OUT" << delimiter;
  out << "ap_sm.vertical_previous.condition.SRS" << delimiter;
  out << "ap_sm.vertical_previous.condition.SRS_GA" << delimiter;
  out << "ap_sm.vertical_previous.condition.THR_RED" << delimiter;
  out << "ap_sm.vertical_previous.condition.H_fcu_active" << delimiter;
  out << "ap_sm.vertical_previous.output.mode" << delimiter;
  out << "ap_sm.vertical_previous.output.mode_autothrust" << delimiter;
  out << "ap_sm.vertical_previous.output.mode_reversion" << delimiter;
  out << "ap_sm.vertical_previous.output.law" << delimiter;
  out << "ap_sm.vertical_previous.output.H_c_ft" << delimiter;
  out << "ap_sm.vertical_previous.output.H_dot_c_fpm" << delimiter;
  out << "ap_sm.vertical_previous.output.FPA_c_deg" << delimiter;
  out << "ap_sm.vertical_previous.output.V_c_kn" << delimiter;
  out << "ap_sm.vertical_previous.output.ALT_soft_mode_active" << delimiter;
  out << "ap_sm.output.enabled_AP1" << delimiter;
  out << "ap_sm.output.enabled_AP2" << delimiter;
  out << "ap_sm.output.lateral_law" << delimiter;
  out << "ap_sm.output.lateral_mode" << delimiter;
  out << "ap_sm.output.lateral_mode_armed" << delimiter;
  out << "ap_sm.output.vertical_law" << delimiter;
  out << "ap_sm.output.vertical_mode" << delimiter;
  out << "ap_sm.output.vertical_mode_armed" << delimiter;
  out << "ap_sm.output.mode_reversion" << delimiter;
  out << "ap_sm.output.mode_reversion_TRK_FPA" << delimiter;
  out << "ap_sm.output.autothrust_mode" << delimiter;
  out << "ap_sm.output.Psi_c_deg" << delimiter;
  out << "ap_sm.output.H_c_ft" << delimiter;
  out << "ap_sm.output.H_dot_c_fpm" << delimiter;
  out << "ap_sm.output.FPA_c_deg" << delimiter;
  out << "ap_sm.output.V_c_kn" << delimiter;
  out << "ap_sm.output.ALT_soft_mode_active" << delimiter;
  out << "ap_law.ap_on" << delimiter;
  out << "ap_law.flight_director.Theta_c_deg" << delimiter;
  out << "ap_law.flight_director.Phi_c_deg" << delimiter;
  out << "ap_law.flight_director.Beta_c_deg" << delimiter;
  out << "ap_law.autopilot.Theta_c_deg" << delimiter;
  out << "ap_law.autopilot.Phi_c_deg" << delimiter;
  out << "ap_law.autopilot.Beta_c_deg" << delimiter;
  out << "athr.sim_throttle_lever_1_pos" << delimiter;
  out << "athr.sim_throttle_lever_2_pos" << delimiter;
  out << "athr.sim_thrust_mode_1" << delimiter;
  out << "athr.sim_thrust_mode_2" << delimiter;
  out << "athr.N1_TLA_1_percent" << delimiter;
  out << "athr.N1_TLA_2_percent" << delimiter;
  out << "athr.is_in_reverse_1)" << delimiter;
  out << "athr.is_in_reverse_2)" << delimiter;
  out << "athr.thrust_limit_type" << delimiter;
  out << "athr.thrust_limit_percent" << delimiter;
  out << "athr.N1_c_1_percent" << delimiter;
  out << "athr.N1_c_2_percent" << delimiter;
  out << "athr.status" << delimiter;
  out << "athr.mode" << delimiter;
  out << "athr.mode_message" << delimiter;
  out << "fbw.sim.time.monotonic_time" << delimiter;
  out << "fbw.sim.time.dt" << delimiter;
  out << "fbw.sim.time.simulation_time" << delimiter;
  out << "fbw.sim.time.monotonic_time" << delimiter;
  out << "fbw.sim.data.nz_g" << delimiter;
  out << "fbw.sim.data.Theta_deg" << delimiter;
  out << "fbw.sim.data.Phi_deg" << delimiter;
  out << "fbw.sim.data.q_deg_s" << delimiter;
  out << "fbw.sim.data.r_deg_s" << delimiter;
  out << "fbw.sim.data.p_deg_s" << delimiter;
  out << "fbw.sim.data.qk_deg_s" << delimiter;
  out << "fbw.sim.data.rk_deg_s" << delimiter;
  out << "fbw.sim.data.pk_deg_s" << delimiter;
  out << "fbw.sim.data.qk_dot_deg_s2" << delimiter;
  out << "fbw.sim.data.rk_dot_deg_s2" << delimiter;
  out << "fbw.sim.data.pk_dot_deg_s2" << delimiter;
  out << "fbw.sim.data.psi_magnetic_deg" << delimiter;
  out << "fbw.sim.data.psi_true_deg" << delimiter;
  out << "fbw.sim.data.eta_deg" << delimiter;
  out << "fbw.sim.data.eta_trim_deg" << delimiter;
  out << "fbw.sim.data.xi_deg" << delimiter;
  out << "fbw.sim.data.zeta_deg" << delimiter;
  out << "fbw.sim.data.zeta_trim_deg" << delimiter;
  out << "fbw.sim.data.alpha_deg" << delimiter;
  out << "fbw.sim.data.beta_deg" << delimiter;
  out << "fbw.sim.data.beta_dot_deg_s" << delimiter;
  out << "fbw.sim.data.V_ias_kn" << delimiter;
  out << "fbw.sim.data.V_tas_kn" << delimiter;
  out << "fbw.sim.data.V_mach" << delimiter;
  out << "fbw.sim.data.H_ft" << delimiter;
  out << "fbw.sim.data.H_ind_ft" << delimiter;
  out << "fbw.sim.data.H_radio_ft" << delimiter;
  out << "fbw.sim.data.CG_percent_MAC" << delimiter;
  out << "fbw.sim.data.total_weight_kg" << delimiter;
  out << "fbw.sim.data.gear_strut_compression_0" << delimiter;
  out << "fbw.sim.data.gear_strut_compression_1" << delimiter;
  out << "fbw.sim.data.gear_strut_compression_2" << delimiter;
  out << "fbw.sim.data.flaps_handle_index" << delimiter;
  out << "fbw.sim.data.spoilers_left_pos" << delimiter;
  out << "fbw.sim.data.spoilers_right_pos" << delimiter;
  out << "fbw.sim.data.autopilot_master_on" << delimiter;
  out << "fbw.sim.data.slew_on" << delimiter;
  out << "fbw.sim.data.pause_on" << delimiter;
  out << "fbw.sim.data.tracking_mode_on_override" << delimiter;
  out << "fbw.sim.data.autopilot_custom_on" << delimiter;
  out << "fbw.sim.data.autopilot_custom_Theta_c_deg" << delimiter;
  out << "fbw.sim.data.autopilot_custom_Phi_c_deg" << delimiter;
  out << "fbw.sim.data.autopilot_custom_Beta_c_deg" << delimiter;
  out << "fbw.sim.data.simulation_rate" << delimiter;
  out << "fbw.sim.data.ice_structure_percent" << delimiter;
  out << "fbw.sim.data.linear_cl_alpha_per_deg" << delimiter;
  out << "fbw.sim.data.alpha_stall_deg" << delimiter;
  out << "fbw.sim.data.alpha_zero_lift_deg" << delimiter;
  out << "fbw.sim.data.ambient_density_kg_per_m3" << delimiter;
  out << "fbw.sim.data.ambient_pressure_mbar" << delimiter;
  out << "fbw.sim.data.ambient_temperature_celsius" << delimiter;
  out << "fbw.sim.data.ambient_wind_x_kn" << delimiter;
  out << "fbw.sim.data.ambient_wind_y_kn" << delimiter;
  out << "fbw.sim.data.ambient_wind_z_kn" << delimiter;
  out << "fbw.sim.data.ambient_wind_velocity_kn" << delimiter;
  out << "fbw.sim.data.ambient_wind_direction_deg" << delimiter;
  out << "fbw.sim.data.total_air_temperature_celsius" << delimiter;
  out << "fbw.sim.data.latitude_deg" << delimiter;
  out << "fbw.sim.data.longitude_deg" << delimiter;
  out << "fbw.sim.data.engine_1_thrust_lbf" << delimiter;
  out << "fbw.sim.data.engine_2_thrust_lbf" << delimiter;
  out << "fbw.sim.data.thrust_lever_1_pos" << delimiter;
  out << "fbw.sim.data.thrust_lever_2_pos" << delimiter;
  out << "fbw.sim.data_computed.on_ground" << delimiter;
  out << "fbw.sim.data_computed.tracking_mode_on" << delimiter;
  out << "fbw.sim.input.delta_eta_pos" << delimiter;
  out << "fbw.sim.input.delta_xi_pos" << delimiter;
  out << "fbw.sim.input.delta_zeta_pos" << delimiter;
  out << "fbw.pitch.data_computed.delta_eta_deg" << delimiter;
  out << "fbw.pitch.data_computed.in_flight" << delimiter;
  out << "fbw.pitch.data_computed.in_rotation" << delimiter;
  out << "fbw.pitch.data_computed.in_flare" << delimiter;
  out << "fbw.pitch.data_computed.in_flight_gain" << delimiter;
  out << "fbw.pitch.data_computed.in_rotation_gain" << delimiter;
  out << "fbw.pitch.data_computed.nz_limit_up_g" << delimiter;
  out << "fbw.pitch.data_computed.nz_limit_lo_g" << delimiter;
  out << "fbw.pitch.data_computed.eta_trim_deg_should_freeze" << delimiter;
  out << "fbw.pitch.data_computed.eta_trim_deg_reset" << delimiter;
  out << "fbw.pitch.data_computed.eta_trim_deg_reset_deg" << delimiter;
  out << "fbw.pitch.data_computed.eta_trim_deg_should_write" << delimiter;
  out << "fbw.pitch.data_computed.eta_trim_deg_rate_limit_up_deg_s" << delimiter;
  out << "fbw.pitch.data_computed.eta_trim_deg_rate_limit_lo_deg_s" << delimiter;
  out << "fbw.pitch.data_computed.flare_Theta_deg" << delimiter;
  out << "fbw.pitch.data_computed.flare_Theta_c_deg" << delimiter;
  out << "fbw.pitch.data_computed.flare_Theta_c_rate_deg_s" << delimiter;
  out << "fbw.pitch.law_rotation.qk_c_deg_s" << delimiter;
  out << "fbw.pitch.law_rotation.eta_deg" << delimiter;
  out << "fbw.pitch.law_normal.nz_c_g" << delimiter;
  out << "fbw.pitch.law_normal.Cstar_g" << delimiter;
  out << "fbw.pitch.law_normal.eta_dot_deg_s" << delimiter;
  out << "fbw.pitch.vote.eta_dot_deg_s" << delimiter;
  out << "fbw.pitch.integrated.eta_deg" << delimiter;
  out << "fbw.pitch.output.eta_deg" << delimiter;
  out << "fbw.pitch.output.eta_trim_deg" << delimiter;
  out << "fbw.roll.data_computed.delta_xi_deg" << delimiter;
  out << "fbw.roll.data_computed.delta_zeta_deg" << delimiter;
  out << "fbw.roll.data_computed.in_flight" << delimiter;
  out << "fbw.roll.data_computed.in_flight_gain" << delimiter;
  out << "fbw.roll.data_computed.zeta_trim_deg_should_write" << delimiter;
  out << "fbw.roll.data_computed.beta_target_deg" << delimiter;
  out << "fbw.roll.law_normal.pk_c_deg_s" << delimiter;
  out << "fbw.roll.law_normal.Phi_c_deg" << delimiter;
  out << "fbw.roll.law_normal.xi_deg" << delimiter;
  out << "fbw.roll.law_normal.zeta_deg" << delimiter;
  out << "fbw.roll.law_normal.zeta_tc_yd_deg" << delimiter;
  out << "fbw.roll.output.xi_deg" << delimiter;
  out << "fbw.roll.output.zeta_deg" << delimiter;
  out << "fbw.roll.output.zeta_trim_deg" << delimiter;
  out << "fbw.output.eta_pos" << delimiter;
  out << "fbw.output.eta_trim_deg" << delimiter;
  out << "fbw.output.eta_trim_deg_should_write" << delimiter;
  out << "fbw.output.xi_pos" << delimiter;
  out << "fbw.output.zeta_pos" << delimiter;
  out << "fbw.output.zeta_trim_pos" << delimiter;
  out << "fbw.output.zeta_trim_pos_should_write";
  out << endl;
}

void FlightDataRecorderConverter::writeStruct(ofstream& out,
                                              const string& delimiter,
                                              const ap_sm_output& ap_sm,
                                              const ap_raw_output& ap_law,
                                              const athr_output& athr,
                                              const fbw_output& fbw) {
  out << ap_sm.time.dt << delimiter;
  out << ap_sm.time.simulation_time << delimiter;
  out << ap_sm.data.Theta_deg << delimiter;
  out << ap_sm.data.Phi_deg << delimiter;
  out << ap_sm.data.qk_deg_s << delimiter;
  out << ap_sm.data.rk_deg_s << delimiter;
  out << ap_sm.data.pk_deg_s << delimiter;
  out << ap_sm.data.V_ias_kn << delimiter;
  out << ap_sm.data.V_tas_kn << delimiter;
  out << ap_sm.data.V_mach << delimiter;
  out << ap_sm.data.V_gnd_kn << delimiter;
  out << ap_sm.data.alpha_deg << delimiter;
  out << ap_sm.data.H_ft << delimiter;
  out << ap_sm.data.H_ind_ft << delimiter;
  out << ap_sm.data.H_radio_ft << delimiter;
  out << ap_sm.data.H_dot_ft_min << delimiter;
  out << ap_sm.data.Psi_magnetic_deg << delimiter;
  out << ap_sm.data.Psi_magnetic_track_deg << delimiter;
  out << ap_sm.data.Psi_true_deg << delimiter;
  out << ap_sm.data.bx_m_s2 << delimiter;
  out << ap_sm.data.by_m_s2 << delimiter;
  out << ap_sm.data.bz_m_s2 << delimiter;
  out << static_cast<unsigned int>(ap_sm.data.nav_valid) << delimiter;
  out << ap_sm.data.nav_loc_deg << delimiter;
  out << static_cast<unsigned int>(ap_sm.data.nav_dme_valid) << delimiter;
  out << ap_sm.data.nav_dme_nmi << delimiter;
  out << static_cast<unsigned int>(ap_sm.data.nav_loc_valid) << delimiter;
  out << ap_sm.data.nav_loc_error_deg << delimiter;
  out << static_cast<unsigned int>(ap_sm.data.nav_gs_valid) << delimiter;
  out << ap_sm.data.nav_gs_error_deg << delimiter;
  out << ap_sm.data.flight_guidance_xtk_nmi << delimiter;
  out << ap_sm.data.flight_guidance_tae_deg << delimiter;
  out << ap_sm.data.flight_phase << delimiter;
  out << ap_sm.data.V2_kn << delimiter;
  out << ap_sm.data.VAPP_kn << delimiter;
  out << ap_sm.data.VLS_kn << delimiter;
  out << static_cast<unsigned int>(ap_sm.data.is_flight_plan_available) << delimiter;
  out << ap_sm.data.altitude_constraint_ft << delimiter;
  out << ap_sm.data.thrust_reduction_altitude << delimiter;
  out << ap_sm.data.thrust_reduction_altitude_go_around << delimiter;
  out << ap_sm.data.acceleration_altitude << delimiter;
  out << ap_sm.data.acceleration_altitude_engine_out << delimiter;
  out << ap_sm.data.acceleration_altitude_go_around << delimiter;
  out << ap_sm.data.cruise_altitude << delimiter;
  out << ap_sm.data.on_ground << delimiter;
  out << ap_sm.data.zeta_deg << delimiter;
  out << ap_sm.data.throttle_lever_1_pos << delimiter;
  out << ap_sm.data.throttle_lever_2_pos << delimiter;
  out << ap_sm.data.flaps_handle_index << delimiter;
  out << ap_sm.data_computed.time_since_touchdown << delimiter;
  out << ap_sm.data_computed.time_since_lift_off << delimiter;
  out << static_cast<unsigned int>(ap_sm.data_computed.H_fcu_in_selection) << delimiter;
  out << static_cast<unsigned int>(ap_sm.data_computed.H_constraint_valid) << delimiter;
  out << static_cast<unsigned int>(ap_sm.data_computed.Psi_fcu_in_selection) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.FD_active) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.AP_1_push) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.AP_2_push) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.AP_DISCONNECT_push) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.HDG_push) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.HDG_pull) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.ALT_push) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.ALT_pull) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.VS_push) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.VS_pull) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.LOC_push) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.APPR_push) << delimiter;
  out << ap_sm.input.V_fcu_kn << delimiter;
  out << ap_sm.input.Psi_fcu_deg << delimiter;
  out << ap_sm.input.H_fcu_ft << delimiter;
  out << ap_sm.input.H_constraint_ft << delimiter;
  out << ap_sm.input.H_dot_fcu_fpm << delimiter;
  out << ap_sm.input.FPA_fcu_deg << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.TRK_FPA_mode) << delimiter;
  out << static_cast<unsigned int>(ap_sm.input.DIR_TO_trigger) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral.armed.NAV) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral.armed.LOC) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral.condition.NAV) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral.condition.LOC_CPT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral.condition.LOC_TRACK) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral.condition.LAND) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral.condition.FLARE) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral.condition.ROLL_OUT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral.condition.GA_TRACK) << delimiter;
  out << ap_sm.lateral.output.mode << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral.output.mode_reversion) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral.output.mode_reversion_TRK_FPA) << delimiter;
  out << ap_sm.lateral.output.law << delimiter;
  out << ap_sm.lateral.output.Psi_c_deg << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral_previous.armed.NAV) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral_previous.armed.LOC) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral_previous.condition.NAV) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral_previous.condition.LOC_CPT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral_previous.condition.LOC_TRACK) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral_previous.condition.LAND) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral_previous.condition.FLARE) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral_previous.condition.ROLL_OUT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral_previous.condition.GA_TRACK) << delimiter;
  out << ap_sm.lateral_previous.output.mode << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral_previous.output.mode_reversion) << delimiter;
  out << static_cast<unsigned int>(ap_sm.lateral_previous.output.mode_reversion_TRK_FPA) << delimiter;
  out << ap_sm.lateral_previous.output.law << delimiter;
  out << ap_sm.lateral_previous.output.Psi_c_deg << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.armed.ALT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.armed.ALT_CST) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.armed.CLB) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.armed.DES) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.armed.GS) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.ALT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.ALT_CPT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.ALT_CST) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.ALT_CST_CPT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.CLB) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.DES) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.GS_CPT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.GS_TRACK) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.LAND) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.FLARE) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.ROLL_OUT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.SRS) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.SRS_GA) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.THR_RED) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.condition.H_fcu_active) << delimiter;
  out << ap_sm.vertical.output.mode << delimiter;
  out << ap_sm.vertical.output.mode_autothrust << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.output.mode_reversion) << delimiter;
  out << ap_sm.vertical.output.law << delimiter;
  out << ap_sm.vertical.output.H_c_ft << delimiter;
  out << ap_sm.vertical.output.H_dot_c_fpm << delimiter;
  out << ap_sm.vertical.output.FPA_c_deg << delimiter;
  out << ap_sm.vertical.output.V_c_kn << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.output.ALT_soft_mode_active) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.armed.ALT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.armed.ALT_CST) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.armed.CLB) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.armed.DES) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.armed.GS) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.ALT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.ALT_CPT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.ALT_CST) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.ALT_CST_CPT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.CLB) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.DES) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.GS_CPT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.GS_TRACK) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.LAND) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.FLARE) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.ROLL_OUT) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.SRS) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.SRS_GA) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.THR_RED) << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.condition.H_fcu_active) << delimiter;
  out << ap_sm.vertical_previous.output.mode << delimiter;
  out << ap_sm.vertical_previous.output.mode_autothrust << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical_previous.output.mode_reversion) << delimiter;
  out << ap_sm.vertical_previous.output.law << delimiter;
  out << ap_sm.vertical_previous.output.H_c_ft << delimiter;
  out << ap_sm.vertical_previous.output.H_dot_c_fpm << delimiter;
  out << ap_sm.vertical_previous.output.FPA_c_deg << delimiter;
  out << ap_sm.vertical_previous.output.V_c_kn << delimiter;
  out << static_cast<unsigned int>(ap_sm.vertical.output.ALT_soft_mode_active) << delimiter;
  out << ap_sm.output.enabled_AP1 << delimiter;
  out << ap_sm.output.enabled_AP2 << delimiter;
  out << ap_sm.output.lateral_law << delimiter;
  out << ap_sm.output.lateral_mode << delimiter;
  out << ap_sm.output.lateral_mode_armed << delimiter;
  out << ap_sm.output.vertical_law << delimiter;
  out << ap_sm.output.vertical_mode << delimiter;
  out << ap_sm.output.vertical_mode_armed << delimiter;
  out << ap_sm.output.mode_reversion << delimiter;
  out << static_cast<unsigned int>(ap_sm.output.mode_reversion_TRK_FPA) << delimiter;
  out << ap_sm.output.autothrust_mode << delimiter;
  out << ap_sm.output.Psi_c_deg << delimiter;
  out << ap_sm.output.H_c_ft << delimiter;
  out << ap_sm.output.H_dot_c_fpm << delimiter;
  out << ap_sm.output.FPA_c_deg << delimiter;
  out << ap_sm.output.V_c_kn << delimiter;
  out << static_cast<unsigned int>(ap_sm.output.ALT_soft_mode_active) << delimiter;
  out << ap_law.ap_on << delimiter;
  out << ap_law.flight_director.Theta_c_deg << delimiter;
  out << ap_law.flight_director.Phi_c_deg << delimiter;
  out << ap_law.flight_director.Beta_c_deg << delimiter;
  out << ap_law.autopilot.Theta_c_deg << delimiter;
  out << ap_law.autopilot.Phi_c_deg << delimiter;
  out << ap_law.autopilot.Beta_c_deg << delimiter;
  out << athr.sim_throttle_lever_1_pos << delimiter;
  out << athr.sim_throttle_lever_2_pos << delimiter;
  out << athr.sim_thrust_mode_1 << delimiter;
  out << athr.sim_thrust_mode_2 << delimiter;
  out << athr.N1_TLA_1_percent << delimiter;
  out << athr.N1_TLA_2_percent << delimiter;
  out << static_cast<unsigned int>(athr.is_in_reverse_1) << delimiter;
  out << static_cast<unsigned int>(athr.is_in_reverse_2) << delimiter;
  out << athr.thrust_limit_type << delimiter;
  out << athr.thrust_limit_percent << delimiter;
  out << athr.N1_c_1_percent << delimiter;
  out << athr.N1_c_2_percent << delimiter;
  out << athr.status << delimiter;
  out << athr.mode << delimiter;
  out << athr.mode_message << delimiter;
  out << fbw.sim.time.monotonic_time << delimiter;
  out << fbw.sim.time.dt << delimiter;
  out << fbw.sim.time.simulation_time << delimiter;
  out << fbw.sim.time.monotonic_time << delimiter;
  out << fbw.sim.data.nz_g << delimiter;
  out << fbw.sim.data.Theta_deg << delimiter;
  out << fbw.sim.data.Phi_deg << delimiter;
  out << fbw.sim.data.q_deg_s << delimiter;
  out << fbw.sim.data.r_deg_s << delimiter;
  out << fbw.sim.data.p_deg_s << delimiter;
  out << fbw.sim.data.qk_deg_s << delimiter;
  out << fbw.sim.data.rk_deg_s << delimiter;
  out << fbw.sim.data.pk_deg_s << delimiter;
  out << fbw.sim.data.qk_dot_deg_s2 << delimiter;
  out << fbw.sim.data.rk_dot_deg_s2 << delimiter;
  out << fbw.sim.data.pk_dot_deg_s2 << delimiter;
  out << fbw.sim.data.psi_magnetic_deg << delimiter;
  out << fbw.sim.data.psi_true_deg << delimiter;
  out << fbw.sim.data.eta_deg << delimiter;
  out << fbw.sim.data.eta_trim_deg << delimiter;
  out << fbw.sim.data.xi_deg << delimiter;
  out << fbw.sim.data.zeta_deg << delimiter;
  out << fbw.sim.data.zeta_trim_deg << delimiter;
  out << fbw.sim.data.alpha_deg << delimiter;
  out << fbw.sim.data.beta_deg << delimiter;
  out << fbw.sim.data.beta_dot_deg_s << delimiter;
  out << fbw.sim.data.V_ias_kn << delimiter;
  out << fbw.sim.data.V_tas_kn << delimiter;
  out << fbw.sim.data.V_mach << delimiter;
  out << fbw.sim.data.H_ft << delimiter;
  out << fbw.sim.data.H_ind_ft << delimiter;
  out << fbw.sim.data.H_radio_ft << delimiter;
  out << fbw.sim.data.CG_percent_MAC << delimiter;
  out << fbw.sim.data.total_weight_kg << delimiter;
  out << fbw.sim.data.gear_strut_compression_0 << delimiter;
  out << fbw.sim.data.gear_strut_compression_1 << delimiter;
  out << fbw.sim.data.gear_strut_compression_2 << delimiter;
  out << fbw.sim.data.flaps_handle_index << delimiter;
  out << fbw.sim.data.spoilers_left_pos << delimiter;
  out << fbw.sim.data.spoilers_right_pos << delimiter;
  out << fbw.sim.data.autopilot_master_on << delimiter;
  out << fbw.sim.data.slew_on << delimiter;
  out << fbw.sim.data.pause_on << delimiter;
  out << fbw.sim.data.tracking_mode_on_override << delimiter;
  out << fbw.sim.data.autopilot_custom_on << delimiter;
  out << fbw.sim.data.autopilot_custom_Theta_c_deg << delimiter;
  out << fbw.sim.data.autopilot_custom_Phi_c_deg << delimiter;
  out << fbw.sim.data.autopilot_custom_Beta_c_deg << delimiter;
  out << fbw.sim.data.simulation_rate << delimiter;
  out << fbw.sim.data.ice_structure_percent << delimiter;
  out << fbw.sim.data.linear_cl_alpha_per_deg << delimiter;
  out << fbw.sim.data.alpha_stall_deg << delimiter;
  out << fbw.sim.data.alpha_zero_lift_deg << delimiter;
  out << fbw.sim.data.ambient_density_kg_per_m3 << delimiter;
  out << fbw.sim.data.ambient_pressure_mbar << delimiter;
  out << fbw.sim.data.ambient_temperature_celsius << delimiter;
  out << fbw.sim.data.ambient_wind_x_kn << delimiter;
  out << fbw.sim.data.ambient_wind_y_kn << delimiter;
  out << fbw.sim.data.ambient_wind_z_kn << delimiter;
  out << fbw.sim.data.ambient_wind_velocity_kn << delimiter;
  out << fbw.sim.data.ambient_wind_direction_deg << delimiter;
  out << fbw.sim.data.total_air_temperature_celsius << delimiter;
  out << fbw.sim.data.latitude_deg << delimiter;
  out << fbw.sim.data.longitude_deg << delimiter;
  out << fbw.sim.data.engine_1_thrust_lbf << delimiter;
  out << fbw.sim.data.engine_2_thrust_lbf << delimiter;
  out << fbw.sim.data.thrust_lever_1_pos << delimiter;
  out << fbw.sim.data.thrust_lever_2_pos << delimiter;
  out << fbw.sim.data_computed.on_ground << delimiter;
  out << fbw.sim.data_computed.tracking_mode_on << delimiter;
  out << fbw.sim.input.delta_eta_pos << delimiter;
  out << fbw.sim.input.delta_xi_pos << delimiter;
  out << fbw.sim.input.delta_zeta_pos << delimiter;
  out << fbw.pitch.data_computed.delta_eta_deg << delimiter;
  out << fbw.pitch.data_computed.in_flight << delimiter;
  out << fbw.pitch.data_computed.in_rotation << delimiter;
  out << fbw.pitch.data_computed.in_flare << delimiter;
  out << fbw.pitch.data_computed.in_flight_gain << delimiter;
  out << fbw.pitch.data_computed.in_rotation_gain << delimiter;
  out << fbw.pitch.data_computed.nz_limit_up_g << delimiter;
  out << fbw.pitch.data_computed.nz_limit_lo_g << delimiter;
  out << static_cast<unsigned int>(fbw.pitch.data_computed.eta_trim_deg_should_freeze) << delimiter;
  out << static_cast<unsigned int>(fbw.pitch.data_computed.eta_trim_deg_reset) << delimiter;
  out << fbw.pitch.data_computed.eta_trim_deg_reset_deg << delimiter;
  out << static_cast<unsigned int>(fbw.pitch.data_computed.eta_trim_deg_should_write) << delimiter;
  out << fbw.pitch.data_computed.eta_trim_deg_rate_limit_up_deg_s << delimiter;
  out << fbw.pitch.data_computed.eta_trim_deg_rate_limit_lo_deg_s << delimiter;
  out << fbw.pitch.data_computed.flare_Theta_deg << delimiter;
  out << fbw.pitch.data_computed.flare_Theta_c_deg << delimiter;
  out << fbw.pitch.data_computed.flare_Theta_c_rate_deg_s << delimiter;
  out << fbw.pitch.law_rotation.qk_c_deg_s << delimiter;
  out << fbw.pitch.law_rotation.eta_deg << delimiter;
  out << fbw.pitch.law_normal.nz_c_g << delimiter;
  out << fbw.pitch.law_normal.Cstar_g << delimiter;
  out << fbw.pitch.law_normal.eta_dot_deg_s << delimiter;
  out << fbw.pitch.vote.eta_dot_deg_s << delimiter;
  out << fbw.pitch.integrated.eta_deg << delimiter;
  out << fbw.pitch.output.eta_deg << delimiter;
  out << fbw.pitch.output.eta_trim_deg << delimiter;
  out << fbw.roll.data_computed.delta_xi_deg << delimiter;
  out << fbw.roll.data_computed.delta_zeta_deg << delimiter;
  out << fbw.roll.data_computed.in_flight << delimiter;
  out << fbw.roll.data_computed.in_flight_gain << delimiter;
  out << static_cast<unsigned int>(fbw.roll.data_computed.zeta_trim_deg_should_write) << delimiter;
  out << fbw.roll.data_computed.beta_target_deg << delimiter;
  out << fbw.roll.law_normal.pk_c_deg_s << delimiter;
  out << fbw.roll.law_normal.Phi_c_deg << delimiter;
  out << fbw.roll.law_normal.xi_deg << delimiter;
  out << fbw.roll.law_normal.zeta_deg << delimiter;
  out << fbw.roll.law_normal.zeta_tc_yd_deg << delimiter;
  out << fbw.roll.output.xi_deg << delimiter;
  out << fbw.roll.output.zeta_deg << delimiter;
  out << fbw.roll.output.zeta_trim_deg << delimiter;
  out << fbw.output.eta_pos << delimiter;
  out << fbw.output.eta_trim_deg << delimiter;
  out << static_cast<unsigned int>(fbw.output.eta_trim_deg_should_write) << delimiter;
  out << fbw.output.xi_pos << delimiter;
  out << fbw.output.zeta_pos << delimiter;
  out << fbw.output.zeta_trim_pos << delimiter;
  out << static_cast<unsigned int>(fbw.output.zeta_trim_pos_should_write);
  out << endl;
}
